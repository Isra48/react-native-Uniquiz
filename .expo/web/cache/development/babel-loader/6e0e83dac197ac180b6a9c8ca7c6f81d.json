{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createModel } from \"@rematch/core\";\nimport { Audio } from \"expo-av\";\n\nvar soundTrack = require(\"../../assets/sounds/music.mp3\");\n\nvar clickSound = require(\"../../assets/sounds/click.wav\");\n\nvar clickSoundObject = new Audio.Sound();\nvar soundObject = new Audio.Sound();\nvar initialState = {\n  isMusicOn: true\n};\nexport var settings = createModel()({\n  state: initialState,\n  reducers: {\n    reset: function reset() {\n      return initialState;\n    },\n    setMusicState: function setMusicState(state, isMusicOn) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isMusicOn: isMusicOn\n      });\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      playMusic: function playMusic() {\n        var _ref, setMusicState, _await$soundObject$ge, isLoaded;\n\n        return _regeneratorRuntime.async(function playMusic$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = dispatch, setMusicState = _ref.settings.setMusicState;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(soundObject.getStatusAsync());\n\n              case 3:\n                _await$soundObject$ge = _context.sent;\n                isLoaded = _await$soundObject$ge.isLoaded;\n\n                if (isLoaded) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(soundObject.loadAsync(soundTrack));\n\n              case 8:\n                _context.next = 10;\n                return _regeneratorRuntime.awrap(soundObject.playAsync());\n\n              case 10:\n                _context.next = 12;\n                return _regeneratorRuntime.awrap(soundObject.setIsLoopingAsync(true));\n\n              case 12:\n                _context.next = 16;\n                break;\n\n              case 14:\n                _context.next = 16;\n                return _regeneratorRuntime.awrap(soundObject.playAsync());\n\n              case 16:\n                setMusicState(true);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      toggleMusic: function toggleMusic(_, rootState) {\n        var _ref2, _ref2$settings, stopMusic, playMusic, setMusicState, _ref3, isMusicOn;\n\n        return _regeneratorRuntime.async(function toggleMusic$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref2 = dispatch, _ref2$settings = _ref2.settings, stopMusic = _ref2$settings.stopMusic, playMusic = _ref2$settings.playMusic, setMusicState = _ref2$settings.setMusicState;\n                _ref3 = rootState, isMusicOn = _ref3.settings.isMusicOn;\n\n                if (!isMusicOn) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                setMusicState(false);\n                _context2.next = 6;\n                return _regeneratorRuntime.awrap(stopMusic());\n\n              case 6:\n                _context2.next = 11;\n                break;\n\n              case 8:\n                setMusicState(true);\n                _context2.next = 11;\n                return _regeneratorRuntime.awrap(playMusic());\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      stopMusic: function stopMusic() {\n        var _ref4, setMusicState;\n\n        return _regeneratorRuntime.async(function stopMusic$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref4 = dispatch, setMusicState = _ref4.settings.setMusicState;\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(soundObject.pauseAsync());\n\n              case 3:\n                setMusicState(false);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      playClickSound: function playClickSound(_, rootState) {\n        var _ref5, isMusicOn, _await$clickSoundObje, isLoaded;\n\n        return _regeneratorRuntime.async(function playClickSound$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _ref5 = rootState, isMusicOn = _ref5.settings.isMusicOn;\n\n                if (isMusicOn) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                _context4.next = 5;\n                return _regeneratorRuntime.awrap(clickSoundObject.getStatusAsync());\n\n              case 5:\n                _await$clickSoundObje = _context4.sent;\n                isLoaded = _await$clickSoundObje.isLoaded;\n\n                if (isLoaded) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 10;\n                return _regeneratorRuntime.awrap(clickSoundObject.loadAsync(clickSound));\n\n              case 10:\n                _context4.next = 12;\n                return _regeneratorRuntime.awrap(clickSoundObject.setPositionAsync(0));\n\n              case 12:\n                _context4.next = 14;\n                return _regeneratorRuntime.awrap(clickSoundObject.playAsync());\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/Users/nuevousuario/Desktop/app mobile/react-native-Uniquiz/store/models/settings.ts"],"names":["createModel","Audio","soundTrack","require","clickSound","clickSoundObject","Sound","soundObject","initialState","isMusicOn","settings","state","reducers","reset","setMusicState","effects","dispatch","playMusic","getStatusAsync","isLoaded","loadAsync","playAsync","setIsLoopingAsync","toggleMusic","_","rootState","stopMusic","pauseAsync","playClickSound","setPositionAsync"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { createModel } from \"@rematch/core\";\nimport { Dispatch, RootState } from \"..\";\nimport { Audio } from \"expo-av\";\nconst soundTrack = require(\"../../assets/sounds/music.mp3\");\nconst clickSound = require(\"../../assets/sounds/click.wav\");\n\nconst clickSoundObject = new Audio.Sound();\nconst soundObject = new Audio.Sound();\nconst initialState: SettingsState = {\n  isMusicOn: true,\n};\nexport const settings = createModel<SettingsState>()({\n  state: initialState, // initial state\n  reducers: {\n    reset() {\n      return initialState;\n    },\n    setMusicState(state, isMusicOn: boolean) {\n      return { ...state, isMusicOn };\n    },\n  },\n  effects: (dispatch) => ({\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    async playMusic() {\n      const {\n        settings: { setMusicState },\n      } = dispatch as Dispatch;\n\n      const { isLoaded } = await soundObject.getStatusAsync();\n      if (!isLoaded) {\n        await soundObject.loadAsync(soundTrack);\n        await soundObject.playAsync();\n        await soundObject.setIsLoopingAsync(true);\n      } else {\n        await soundObject.playAsync();\n      }\n      setMusicState(true);\n      // Don't forget to unload the sound from memory\n      // when you are done using the Sound object\n      // await soundObject.unloadAsync();\n    },\n    async toggleMusic(_, rootState) {\n      const {\n        settings: { stopMusic, playMusic, setMusicState },\n      } = dispatch as Dispatch;\n      const {\n        settings: { isMusicOn },\n      } = rootState as RootState;\n\n      if (isMusicOn) {\n        setMusicState(false);\n        await stopMusic();\n      } else {\n        setMusicState(true);\n        await playMusic();\n      }\n    },\n    async stopMusic() {\n      const {\n        settings: { setMusicState },\n      } = dispatch as Dispatch;\n\n      await soundObject.pauseAsync();\n      setMusicState(false);\n    },\n    async playClickSound(_, rootState) {\n      const {\n        settings: { isMusicOn },\n      } = rootState as RootState;\n      if (!isMusicOn) {\n        return;\n      }\n      const { isLoaded } = await clickSoundObject.getStatusAsync();\n      if (!isLoaded) {\n        await clickSoundObject.loadAsync(clickSound);\n      }\n      await clickSoundObject.setPositionAsync(0);\n      await clickSoundObject.playAsync();\n    },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}