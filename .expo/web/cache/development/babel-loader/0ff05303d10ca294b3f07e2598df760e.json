{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nuevousuario/Desktop/app mobile/react-native-Uniquiz/screens/Quizz.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport * as Animatable from \"react-native-animatable\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { human } from \"react-native-typography\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { categoryImages } from \"../utils/categories\";\nimport { SharedElement } from \"react-navigation-shared-element\";\nimport { AllHtmlEntities as Entities } from \"html-entities\";\nvar entities = new Entities();\n\nvar Quizz = function Quizz(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAboutToLeave = _useState2[0],\n      setAboutToLeave = _useState2[1];\n\n  var questions = useSelector(function (state) {\n    return state.questions;\n  });\n  var dispatch = useDispatch();\n  var handleAnswer = useCallback(function (answer) {\n    dispatch.questions.storeAnswer(answer);\n\n    if (questions.currentQuestionIndex + 1 === questions.amount) {\n      setAboutToLeave(true);\n      navigation.navigate(\"Results\");\n    } else {\n      dispatch.questions.incrementQuestion();\n    }\n  }, [dispatch, questions]);\n  var currentQuestion = questions.questions[questions.currentQuestionIndex];\n  var currentQuestionText = useMemo(function () {\n    return entities.decode(currentQuestion == null ? void 0 : currentQuestion.question);\n  }, [currentQuestion]);\n  var imageLeft = useMemo(function () {\n    return (0.2 + Math.random()) * 30 + \"%\";\n  }, []);\n  var categoryImage = categoryImages[route.params.category];\n  var imageStyle = {\n    width: categoryImage.width,\n    height: categoryImage.height,\n    position: \"absolute\",\n    left: imageLeft,\n    bottom: 0\n  };\n\n  if (questions.error) {\n    return React.createElement(LinearGradient, {\n      colors: [\"#4b6cb7\", \"#182848\"],\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: [human.title1White],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Oops, There was an error!\"), React.createElement(Text, {\n      style: human.title2White,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, questions.error), React.createElement(SharedElement, {\n      id: route.params.category,\n      style: [imageStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, React.createElement(Image, {\n      style: [imageStyle, isAboutToLeave ? {\n        opacity: 0\n      } : {}],\n      source: categoryImage.source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  var allAnswers = [currentQuestion.correct_answer].concat(_toConsumableArray(currentQuestion.incorrect_answers)).sort(function (a, b) {\n    return b.localeCompare(a);\n  });\n  return React.createElement(LinearGradient, {\n    colors: [\"#4b6cb7\", \"#182848\"],\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: [human.title1White],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Quizz \", questions.currentQuestionIndex + 1, \"/\", questions.amount), React.createElement(Animatable.Text, {\n    key: questions.currentQuestionIndex,\n    animation: \"zoomIn\",\n    style: [human.title2White, styles.question],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, currentQuestionText), allAnswers.map(function (answer) {\n    return React.createElement(TouchableOpacity, {\n      key: \"\" + answer + questions.currentQuestionIndex,\n      onPress: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                handleAnswer(answer);\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(dispatch.settings.playClickSound());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: human.title2White,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, answer));\n  }), React.createElement(StatusBar, {\n    style: \"light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), React.createElement(SharedElement, {\n    id: route.params.category,\n    style: [imageStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: [imageStyle, isAboutToLeave ? {\n      opacity: 0\n    } : {}],\n    source: categoryImage.source,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Quizz;\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 8,\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 8,\n    width: \"100%\",\n    paddingBottom: 50\n  },\n  question: {\n    padding: 20,\n    textAlign: \"center\"\n  },\n  button: {\n    borderRadius: 40,\n    width: \"100%\",\n    borderColor: \"cyan\",\n    borderWidth: 3,\n    height: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: 16\n  }\n});","map":{"version":3,"sources":["/Users/nuevousuario/Desktop/app mobile/react-native-Uniquiz/screens/Quizz.tsx"],"names":["StatusBar","Animatable","React","useCallback","useMemo","useState","useSelector","useDispatch","human","LinearGradient","categoryImages","SharedElement","AllHtmlEntities","Entities","entities","Quizz","navigation","route","isAboutToLeave","setAboutToLeave","questions","state","dispatch","handleAnswer","answer","storeAnswer","currentQuestionIndex","amount","navigate","incrementQuestion","currentQuestion","currentQuestionText","decode","question","imageLeft","Math","random","categoryImage","params","category","imageStyle","width","height","position","left","bottom","error","styles","container","title1White","title2White","opacity","source","allAnswers","correct_answer","incorrect_answers","sort","a","b","localeCompare","map","settings","playClickSound","button","StyleSheet","create","paddingTop","flex","alignItems","justifyContent","paddingHorizontal","paddingBottom","padding","textAlign","borderRadius","borderColor","borderWidth","marginBottom"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport * as Animatable from \"react-native-animatable\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  Image,\n  TouchableOpacity,\n  StyleProp,\n  ImageStyle,\n} from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState, Dispatch } from \"../store\";\nimport { human } from \"react-native-typography\";\nimport { QuizzProps } from \"../types/navigation\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { categoryImages } from \"../utils/categories\";\nimport { SharedElement } from \"react-navigation-shared-element\";\nimport { AllHtmlEntities as Entities } from \"html-entities\";\nconst entities = new Entities();\nconst Quizz: React.FunctionComponent<QuizzProps> = ({\n  navigation,\n  route,\n}: QuizzProps) => {\n  const [isAboutToLeave, setAboutToLeave] = useState(false);\n  // get the current question from the store\n\n  const questions: QuestionsState = useSelector<RootState, QuestionsState>(\n    (state) => state.questions\n  );\n  const dispatch = useDispatch<Dispatch>();\n  const handleAnswer = useCallback(\n    (answer) => {\n      // store answer in the store\n      dispatch.questions.storeAnswer(answer);\n      if (questions.currentQuestionIndex + 1 === questions.amount) {\n        // ge to results screen\n        // fix\n        setAboutToLeave(true);\n        navigation.navigate(\"Results\");\n      } else {\n        // get the next answer\n        dispatch.questions.incrementQuestion();\n      }\n    },\n    [dispatch, questions]\n  );\n  const currentQuestion = questions.questions[questions.currentQuestionIndex];\n  const currentQuestionText = useMemo(() => {\n    return entities.decode(currentQuestion?.question);\n  }, [currentQuestion]);\n  const imageLeft = useMemo(() => `${(0.2 + Math.random()) * 30}%`, []);\n  const categoryImage = categoryImages[route.params.category];\n  const imageStyle: StyleProp<ImageStyle> = {\n    width: categoryImage.width,\n    height: categoryImage.height,\n    position: \"absolute\",\n    left: imageLeft,\n    bottom: 0,\n  };\n  // navigation is done after loading the questions\n  if (questions.error) {\n    //TODO:\n    return (\n      <LinearGradient colors={[\"#4b6cb7\", \"#182848\"]} style={styles.container}>\n        <Text style={[human.title1White]}>Oops, There was an error!</Text>\n        <Text style={human.title2White}>{questions.error}</Text>\n        <SharedElement id={route.params.category} style={[imageStyle]}>\n          <Image\n            // random in the render function will make the image move on every render :)\n            style={[imageStyle, isAboutToLeave ? { opacity: 0 } : {}]}\n            source={categoryImage.source}\n          />\n        </SharedElement>\n      </LinearGradient>\n    );\n  }\n\n  const allAnswers = [\n    currentQuestion.correct_answer,\n    ...currentQuestion.incorrect_answers,\n  ].sort((a, b) => b.localeCompare(a));\n\n  return (\n    <LinearGradient colors={[\"#4b6cb7\", \"#182848\"]} style={styles.container}>\n      <Text style={[human.title1White]}>\n        Quizz {questions.currentQuestionIndex + 1}/{questions.amount}\n      </Text>\n\n      <Animatable.Text\n        key={questions.currentQuestionIndex}\n        animation=\"zoomIn\"\n        style={[human.title2White, styles.question]}\n      >\n        {currentQuestionText}\n      </Animatable.Text>\n      {allAnswers.map((answer) => (\n        <TouchableOpacity\n          key={`${answer}${questions.currentQuestionIndex}`}\n          onPress={async () => {\n            handleAnswer(answer);\n            await dispatch.settings.playClickSound();\n          }}\n          style={styles.button}\n        >\n          <Text style={human.title2White}>{answer}</Text>\n        </TouchableOpacity>\n      ))}\n      <StatusBar style=\"light\" />\n      <SharedElement id={route.params.category} style={[imageStyle]}>\n        <Image\n          // random in the render function will make the image move on every render :)\n          style={[imageStyle, isAboutToLeave ? { opacity: 0 } : {}]}\n          source={categoryImage.source}\n        />\n      </SharedElement>\n    </LinearGradient>\n  );\n};\n\nexport default Quizz;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 8,\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 8,\n    width: \"100%\",\n    paddingBottom: 50,\n  },\n  question: { padding: 20, textAlign: \"center\" },\n  button: {\n    borderRadius: 40,\n    width: \"100%\",\n    borderColor: \"cyan\",\n    borderWidth: 3,\n    height: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}