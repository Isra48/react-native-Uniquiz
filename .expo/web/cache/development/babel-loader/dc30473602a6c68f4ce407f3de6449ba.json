{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createModel } from \"@rematch/core\";\nimport api from \"../../utils/api\";\nimport config from \"../../utils/config\";\nvar initialState = {\n  questions: [],\n  amount: config.amount,\n  type: config.type,\n  difficulty: config.difficulty,\n  currentQuestionIndex: 0,\n  answers: {},\n  loading: false,\n  error: \"\"\n};\nexport var questions = createModel()({\n  state: initialState,\n  reducers: {\n    reset: function reset() {\n      return initialState;\n    },\n    setQuestions: function setQuestions(state, payload) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        questions: payload\n      });\n    },\n    setLoading: function setLoading(state, loading) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: loading\n      });\n    },\n    setError: function setError(state, error) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: error\n      });\n    },\n    storeAnswer: function storeAnswer(state, answer) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        answers: _objectSpread(_objectSpread({}, state.answers), {}, _defineProperty({}, state.currentQuestionIndex, answer))\n      });\n    },\n    incrementQuestion: function incrementQuestion(state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentQuestionIndex: state.currentQuestionIndex < config.amount ? state.currentQuestionIndex + 1 : state.currentQuestionIndex\n      });\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      loadQuestions: function loadQuestions(_ref, rootState) {\n        var categoryId, _ref2, _ref2$questions, reset, setLoading, setError, setQuestions, _ref3, _ref3$questions, amount, type, difficulty, typeParam, difficultyParam, categoryParam, result, _questions;\n\n        return _regeneratorRuntime.async(function loadQuestions$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                categoryId = _ref.categoryId;\n                _ref2 = dispatch, _ref2$questions = _ref2.questions, reset = _ref2$questions.reset, setLoading = _ref2$questions.setLoading, setError = _ref2$questions.setError, setQuestions = _ref2$questions.setQuestions;\n                _ref3 = rootState, _ref3$questions = _ref3.questions, amount = _ref3$questions.amount, type = _ref3$questions.type, difficulty = _ref3$questions.difficulty;\n                reset();\n                typeParam = type === \"mixed\" ? \"\" : \"&type=\" + type;\n                difficultyParam = difficulty === \"mixed\" ? \"\" : \"&difficulty=\" + difficulty;\n                categoryParam = categoryId === \"mixed\" ? \"\" : \"&category=\" + categoryId;\n                setLoading(true);\n                _context.prev = 8;\n                _context.next = 11;\n                return _regeneratorRuntime.awrap(api.get(\"?amount=\" + amount + difficultyParam + typeParam + categoryParam));\n\n              case 11:\n                result = _context.sent;\n                setLoading(false);\n                _questions = result.data.results;\n                setQuestions(_questions);\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](8);\n                setLoading(false);\n                setError(_context.t0.message);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[8, 17]], Promise);\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/Users/nuevousuario/Desktop/app mobile/react-native-Uniquiz/store/models/questions.ts"],"names":["createModel","api","config","initialState","questions","amount","type","difficulty","currentQuestionIndex","answers","loading","error","state","reducers","reset","setQuestions","payload","setLoading","setError","storeAnswer","answer","incrementQuestion","effects","dispatch","loadQuestions","rootState","categoryId","typeParam","difficultyParam","categoryParam","get","result","data","results","message"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { createModel } from \"@rematch/core\";\nimport { Dispatch, RootState } from \"..\";\nimport api from \"../../utils/api\";\nimport config from \"../../utils/config\";\n\nconst initialState: QuestionsState = {\n  questions: [],\n  // we put it here to allow the user to configure it in the future from the settings\n  amount: config.amount,\n  type: config.type,\n  difficulty: config.difficulty,\n  currentQuestionIndex: 0,\n  answers: {},\n  loading: false,\n  error: \"\",\n};\nexport const questions = createModel<QuestionsState>()({\n  state: initialState, // initial state\n  reducers: {\n    reset() {\n      return initialState;\n    },\n    setQuestions(state, payload: Array<BooleanQuestion>) {\n      return { ...state, questions: payload };\n    },\n    setLoading(state, loading: boolean) {\n      return { ...state, loading };\n    },\n    setError(state, error: string) {\n      return { ...state, error };\n    },\n    storeAnswer(state, answer: StringBoolean) {\n      return {\n        ...state,\n        answers: {\n          ...state.answers,\n          [state.currentQuestionIndex]: answer,\n        },\n      };\n    },\n    incrementQuestion(state) {\n      return {\n        ...state,\n        currentQuestionIndex:\n          state.currentQuestionIndex < config.amount\n            ? state.currentQuestionIndex + 1\n            : state.currentQuestionIndex,\n      };\n    },\n  },\n  effects: (dispatch) => ({\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    async loadQuestions({ categoryId }: { categoryId: string }, rootState) {\n      const {\n        questions: { reset, setLoading, setError, setQuestions },\n      } = dispatch as Dispatch;\n      const {\n        questions: { amount, type, difficulty },\n      } = rootState as RootState;\n\n      // useful when using the back button to go to the\n      // home screen when the quizz is in progress\n      reset();\n      const typeParam = type === \"mixed\" ? \"\" : `&type=${type}`;\n      const difficultyParam =\n        difficulty === \"mixed\" ? \"\" : `&difficulty=${difficulty}`;\n      const categoryParam =\n        categoryId === \"mixed\" ? \"\" : `&category=${categoryId}`;\n      setLoading(true);\n      try {\n        const result = await api.get(\n          `?amount=${amount}${difficultyParam}${typeParam}${categoryParam}`\n        );\n        setLoading(false);\n        const questions = result.data.results;\n\n        setQuestions(questions);\n      } catch (error) {\n        setLoading(false);\n        setError(error.message);\n      }\n\n      // typedDispatch.questions.setQuestions(result)\n    },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}